name: Sync to Hugging Face Space (Hub Method)

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  HF_USERNAME: youtah
  HF_SPACE_NAME: brandboost-content-generator

jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Hugging Face Hub
      run: |
        pip install huggingface_hub
        
    - name: Sync to HF Space
      run: |
        python -c "
        from huggingface_hub import HfApi, Repository
        import os
        
        # Initialize API with token
        api = HfApi(token='${{ secrets.HF_TOKEN }}')
        
        # Create or get the space repository
        repo_id = '${{ env.HF_USERNAME }}/${{ env.HF_SPACE_NAME }}'
        
        try:
            # Try to get existing repo
            repo = api.repo_info(repo_id=repo_id, repo_type='space')
            print(f'‚úÖ Found existing space: {repo_id}')
        except:
            print(f'‚ùå Space {repo_id} not found or not accessible')
            exit(1)
        
        # Upload all files
        print('üîÑ Uploading files to Hugging Face Space...')
        
        # Upload main files
        api.upload_file(
            path_or_fileobj='app.py',
            path_in_repo='app.py',
            repo_id=repo_id,
            repo_type='space'
        )
        
        api.upload_file(
            path_or_fileobj='requirements.txt',
            path_in_repo='requirements.txt',
            repo_id=repo_id,
            repo_type='space'
        )
        
        api.upload_file(
            path_or_fileobj='README.md',
            path_in_repo='README.md',
            repo_id=repo_id,
            repo_type='space'
        )
        
        # Upload utils directory
        import shutil
        if os.path.exists('utils'):
            for root, dirs, files in os.walk('utils'):
                for file in files:
                    if not file.endswith('.pyc'):
                        file_path = os.path.join(root, file)
                        repo_path = file_path
                        api.upload_file(
                            path_or_fileobj=file_path,
                            path_in_repo=repo_path,
                            repo_id=repo_id,
                            repo_type='space'
                        )
        
        # Upload sample_data directory
        if os.path.exists('sample_data'):
            for root, dirs, files in os.walk('sample_data'):
                for file in files:
                    file_path = os.path.join(root, file)
                    repo_path = file_path
                    api.upload_file(
                        path_or_fileobj=file_path,
                        path_in_repo=repo_path,
                        repo_id=repo_id,
                        repo_type='space'
                    )
        
        print('‚úÖ Successfully synced to Hugging Face Space!')
        "
